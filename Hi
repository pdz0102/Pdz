using UnityEngine;
using UnityEngine.UI;

public class AutoBlockUI : MonoBehaviour
{
    [Header("UI")]
    public Button toggleButton;
    public Text buttonLabel;

    [Header("Refs")]
    public Animator playerAnimator;
    public AudioSource audioSource;
    public AudioClip blockStartSfx;
    public AudioClip blockImpactSfx;
    public Transform player;
    public Transform enemy;
    public EnemyAttackBroadcaster enemyAtk;

    [Header("Blocking Settings")]
    public float blockRange = 12f;      // chỉ block nếu enemy trong phạm vi
    public float reactionDelay = 0.1f;  // tốc độ phản ứng (giây) - 0 = block ngay

    bool isBlocking;
    bool autoBlockEnabled = true; // mặc định bật

    void Start()
    {
        if (toggleButton != null)
        {
            toggleButton.onClick.AddListener(ToggleAutoBlock);
            UpdateButtonLabel();
        }

        if (enemyAtk != null)
        {
            enemyAtk.OnWindupStarted += HandleEnemyWindup;
            enemyAtk.OnAttackReleased += HandleEnemyAttackReleased;
        }
    }

    void OnDestroy()
    {
        if (enemyAtk != null)
        {
            enemyAtk.OnWindupStarted -= HandleEnemyWindup;
            enemyAtk.OnAttackReleased -= HandleEnemyAttackReleased;
        }
    }

    void ToggleAutoBlock()
    {
        autoBlockEnabled = !autoBlockEnabled;
        UpdateButtonLabel();
    }

    void UpdateButtonLabel()
    {
        if (buttonLabel != null)
            buttonLabel.text = autoBlockEnabled ? "AutoBlock: ON" : "AutoBlock: OFF";
    }

    void HandleEnemyWindup(AttackInfo info)
    {
        if (!autoBlockEnabled) return;

        float dist = Vector3.Distance(player.position, enemy.position);
        if (dist <= blockRange)
        {
            // thêm delay để giả lập tốc độ phản ứng
            Invoke(nameof(StartBlock), reactionDelay);
        }
    }

    void HandleEnemyAttackReleased(AttackInfo info)
    {
        if (!autoBlockEnabled) return;

        if (isBlocking)
        {
            playerAnimator.SetTrigger("BlockImpact");
            if (blockImpactSfx != null) audioSource.PlayOneShot(blockImpactSfx);
        }

        StopBlock();
    }

    void StartBlock()
    {
        if (isBlocking) return;
        isBlocking = true;

        playerAnimator.SetBool("IsBlocking", true);
        if (blockStartSfx != null) audioSource.PlayOneShot(blockStartSfx);
    }

    void StopBlock()
    {
        if (!isBlocking) return;
        isBlocking = false;

        playerAnimator.SetBool("IsBlocking", false);
    }
}

// ---------------- Enemy Broadcaster ----------------
public class EnemyAttackBroadcaster : MonoBehaviour
{
    public System.Action<AttackInfo> OnWindupStarted;
    public System.Action<AttackInfo> OnAttackReleased;

    public void AnimEvent_WindupStart() => OnWindupStarted?.Invoke(new AttackInfo());
    public void AnimEvent_AttackRelease() => OnAttackReleased?.Invoke(new AttackInfo());
}

public struct AttackInfo
{
    public string name;
    public float windupTime;
    public float damage;
}
